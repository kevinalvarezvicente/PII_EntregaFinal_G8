<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChatBot_Logic</name>
    </assembly>
    <members>
        <member name="T:ChatBot_Logic.Properties.Resources">
            <summary>
              Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:ChatBot_Logic.Properties.Resources.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:ChatBot_Logic.Properties.Resources.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
            </summary>
        </member>
        <member name="P:ChatBot_Logic.Properties.Resources.NETCORE_ENVIRONMENT">
            <summary>
              Busca una cadena traducida similar a development.
            </summary>
        </member>
        <member name="T:ChatBot_Logic.src.Handlers.GoodByeHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.GoodByeHandler.#ctor(ChatBot_Logic.src.HandlersConfiguration.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ChatBot_Logic.src.Handlers.GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.GoodByeHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ChatBot_Logic.src.Handlers.HelloHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.HelloHandler.#ctor(ChatBot_Logic.src.HandlersConfiguration.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ChatBot_Logic.src.Handlers.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.HelloHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ChatBot_Logic.src.Handlers.PlaceShipHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "PlaceShipHandler".
            </summary>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.PlaceShipHandler.#ctor(ChatBot_Logic.src.HandlersConfiguration.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ChatBot_Logic.src.Handlers.PlaceShipHandler"/>. Esta clase procesa el mensaje "PlaceShipHandler".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.PlaceShipHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.UserToPlayerHandler.#ctor(ChatBot_Logic.src.HandlersConfiguration.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ChatBot_Logic.src.Handlers.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ChatBot_Logic.src.Handlers.UserToPlayerHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ChatBot_Logic.src.HandlersConfiguration.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.#ctor(ChatBot_Logic.src.HandlersConfiguration.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ChatBot_Logic.src.HandlersConfiguration.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.#ctor(System.Collections.Generic.List{System.String},ChatBot_Logic.src.HandlersConfiguration.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ChatBot_Logic.src.HandlersConfiguration.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y asigna
            la respuesta al mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o lo pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ChatBot_Logic.src.HandlersConfiguration.IHandler" -->
        <member name="P:ChatBot_Logic.src.HandlersConfiguration.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.IHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ChatBot_Logic.src.HandlersConfiguration.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:ChatBot_Logic.src.SecretToken.BotSecret">
            <summary>
            Object POCO class.
            </summary>
        </member>
        <member name="P:ChatBot_Logic.src.SecretToken.BotSecret.Token">
            <summary>
            Obtiene o sobreescribe el etoken
            </summary>
        </member>
        <member name="T:PII_ENTREGAFINAL_G8.src.ChatBot_Logic.SecretToken.ISecretService">
            <summary>
            Pone a disposicion el token de la clase Secret Service para
            que pueda ser utilizado por ChatBot cumpliendo el Dependency Inversion Principle (DIP)
            </summary>
        </member>
        <member name="P:PII_ENTREGAFINAL_G8.src.ChatBot_Logic.SecretToken.ISecretService.Token">
            <summary>
            Obtiene el Token.
            </summary>
        </member>
        <member name="T:PII_ENTREGAFINAL_G8.src.ChatBot_Logic.SecretToken.SecretService">
            <summary>
            Una clase que provee el servicio de leer el token secreto del bot.
            </summary>
        </member>
        <member name="M:PII_ENTREGAFINAL_G8.src.ChatBot_Logic.SecretToken.SecretService.#ctor(Microsoft.Extensions.Options.IOptions{ChatBot_Logic.src.SecretToken.BotSecret})">
            <summary>
            Inicializa una nueva instancia de <see cref="T:PII_ENTREGAFINAL_G8.src.ChatBot_Logic.SecretToken.SecretService"/> class.
            </summary>
            <param name="secrets">The secrets.</param>
        </member>
        <member name="P:PII_ENTREGAFINAL_G8.src.ChatBot_Logic.SecretToken.SecretService.Token">
            <inheritdoc/>
        </member>
    </members>
</doc>
